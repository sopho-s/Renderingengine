name: CMake on a single platform

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      # explicit include-based build matrix, of known valid options
      matrix:
        include:
          # 22.04 supports CUDA 11.7+
          - os: ubuntu-22.04
            cuda: "12.0"
            gcc: 11
          - os: ubuntu-22.04
            cuda: "11.8"
            gcc: 10
          - os: ubuntu-22.04
            cuda: "11.7"
            gcc: 10
          # 20.04 supports CUDA 11.0+
          - os: ubuntu-20.04
            cuda: "11.6"
            gcc: 10
          - os: ubuntu-20.04
            cuda: "11.5"
            gcc: 10
          - os: ubuntu-20.04
            cuda: "11.4"
            gcc: 10
          - os: ubuntu-20.04
            cuda: "11.3"
            gcc: 10
          - os: ubuntu-20.04
            cuda: "11.2"
            gcc: 10
          - os: ubuntu-20.04
            cuda: "11.0"
    steps:
    - uses: actions/checkout@v4

    - name: Install CUDA
      env:
        cuda: ${{ matrix.cuda }}
      run: |
        bash ./scripts/actions/install_cuda_ubuntu.sh
      shell: bash
    
    - name: Install/Select gcc and g++ 
      run: |
        sudo apt-get install -y gcc-${{ matrix.gcc }} g++-${{ matrix.gcc }}
        echo "CC=/usr/bin/gcc-${{ matrix.gcc }}" >> $GITHUB_ENV
        echo "CXX=/usr/bin/g++-${{ matrix.gcc }}" >> $GITHUB_ENV
        echo "CUDAHOSTCXX=/usr/bin/g++-${{ matrix.gcc }}" >> $GITHUB_ENV

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: .\build\Tests\Release\Tests

